

flink {
  # Describes how much time Flink should wait before closing the window.
  # Conventional joins also support this capability.
  # Behaves closely to Kafka's grace period.
  allowed.lateness.ms = ${?FLINK_ALLOWED_LATENESS}

  # Describes how late an out-of-order event can be.
  out.of.order.ms = ${?FLINK_MAX_OUT_OF_ORDER}

  # Consider using punctuated watermarking strategies for deterministic event-time driven outputs.
  watermark.ms = ${?FLINK_WMK}

  # An idle partition in a topic can cause watermarks to stop propagating.
  idleness.ms = ${?FLINK_IDLENESS}

  # When Flink finishes writing the checkpoint,
  # it commits its messages to Kafka as a transaction.
  # Without the prefix, transactions can break each other.
  transaction.id.prefix = ${?FLINK_TRX_ID_PREFIX}

  # It should be a distributed reliable storage.
  checkpoint.storage = ${?FLINK_CP_STORAGE}

  # The data becomes available only when Flink finishes writing the checkpoint.
  # Decrease this time to have lower latency.
  checkpoint.ms = ${?FLINK_CP}
  checkpoint.timeout.ms = ${?FLINK_CP_TIMEOUT}

  # Describes the lowest interval between the checkpoints.
  checkpoint.pause.ms = ${?FLINK_CP_PAUSE}

  # Describes how many checkpoint failures Flink tolerates before aborting the job.
  checkpoint.tolerable.failure.num = ${?FLINK_CP_TOL_NUM}

  window.size.ms = ${?SIZE}

  window.step.ms = ${?STEP}

  kafka {
    servers = ${?KAFKA_SERVERS}

    topic {
      in = ${?KAFKA_TOPIC_IN}
      out = ${?KAFKA_TOPIC_OUT}
    }

    group.id = ${?FLINK_KAFKA_GROUP_ID}

    # Should be equal to the checkpoint time plus the restart time.
    # Should be set otherwise you will see no more records.
    transaction.timeout.ms = ${?FLINK_KAFKA_TRX_TIMEOUT}
  }

}